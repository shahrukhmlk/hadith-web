generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DB_PRISMA_URL")
  directUrl = env("DB_URL_NON_POOLING")
}

model Book {
  id              Int               @id @default(autoincrement())
  dateCreated     DateTime          @default(now()) @db.Timestamptz(6)
  dateUpdated     DateTime?         @db.Timestamptz(6)
  userCreated     Int?
  userUpdated     Int?
  status          status            @default(draft)
  sort            Int?
  name            String            @db.VarChar
  BookTranslation BookTranslation[]
  HadithBook      HadithBook[]
}

model Hadith {
  id                Int                 @id @default(autoincrement())
  number            Int                 @unique
  date              DateTime            @unique @db.Date
  status            status              @default(draft)
  dateCreated       DateTime            @default(now()) @db.Timestamptz(6)
  dateUpdated       DateTime?           @db.Timestamptz(6)
  userCreated       Int?
  userUpdated       Int?
  HadithBook        HadithBook[]
  HadithTranslation HadithTranslation[]
}

model HadithBook {
  hadithID        Int
  bookID          Int
  hadithRefNumber Int
  Book            Book   @relation(fields: [bookID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "HadithBook_Book_id")
  Hadith          Hadith @relation(fields: [hadithID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "HadithBook_Hadith_id")

  @@id([hadithID, bookID, hadithRefNumber])
  @@index([hadithID], map: "fki_HadithBook_Hadith_id")
  @@index([bookID], map: "fki_HadithBook_Book_id")
}

model Language {
  code              String              @id @db.VarChar
  name              String              @db.VarChar
  rtl               Boolean?            @default(false)
  sort              Int?
  BookTranslation   BookTranslation[]
  HadithTranslation HadithTranslation[]
}

model HadithTranslation {
  hadithID     Int
  languageCode String   @db.VarChar
  topic        String
  text         String
  fontScale    Int      @default(0)
  Hadith       Hadith   @relation(fields: [hadithID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "HadithTranslation_HadithID")
  Language     Language @relation(fields: [languageCode], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "HadithTranslation_LanguageCode")

  @@id([hadithID, languageCode])
  @@index([languageCode], map: "fki_HadithTranslation_LanguageCode")
  @@index([hadithID], map: "fki_HadithTranslation_HadithID")
}

model BookTranslation {
  bookID       Int
  languageCode String   @db.VarChar
  name         String   @db.VarChar
  Book         Book     @relation(fields: [bookID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "BookTranslation_BookID")
  Language     Language @relation(fields: [languageCode], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "BookTranslation_LanguageCode")

  @@id([bookID, languageCode])
  @@index([bookID], map: "fki_BookTranslation_BookID")
  @@index([languageCode], map: "fki_BookTranslation_LanguageCode")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum status {
  draft
  published
  archived
}
