import "base"
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DB_PRISMA_URL")
    directUrl = env("DB_URL_NON_POOLING")
}

plugin prisma {
    provider = '@core/prisma'
    output = '../prisma/schema.prisma'
    format = true
}

plugin hooks {
    provider = '@zenstackhq/tanstack-query'
    target = 'react'
    version = 'v5'
    output = '../src/lib/hooks/query'
}

model Book extends Base {
    id Int @id @default(autoincrement())
    status Status @default(draft)
    sort Int?
    name String
    userCreated User? @relation("Book_userIDCreatedToUser", fields: [userIDCreated], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "BookUserCreated")
    userUpdated User? @relation("Book_userIDUpdatedToUser", fields: [userIDUpdated], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "BookUserUpdated")
    translations BookTranslation[]
    hadiths HadithBook[]

    @@index([userIDCreated], map: "fki_BookUserCreated")
    @@index([userIDUpdated], map: "fki_BookUserUpdated")

    @@allow('all', auth().role == "admin")
}

model Topic extends Base {
    id Int @id @default(autoincrement())
    title String
    userCreated User? @relation("Topic_userIDCreatedToUser", fields: [userIDCreated], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "HadithTranslationUserCreated")
    userUpdated User? @relation("Topic_userIDUpdatedToUser", fields: [userIDUpdated], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "HadithTranslationUserUpdated")
    hadiths Hadith[]
    translations TopicTranslation[]

    @@index([userIDCreated], map: "fki_TopicUserCreated")
    @@index([userIDUpdated], map: "fki_TopicUserUpdated")

    @@allow('all', auth().role == "admin")
    @@allow('read', true)
}

model Hadith extends Base {
    id Int @id @default(autoincrement())
    number Int @unique
    date DateTime @unique @db.Date
    status Status @default(draft)
    text String
    topicID Int
    topic Topic @relation(fields: [topicID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "topicID")
    userCreated User? @relation("Hadith_userIDCreatedToUser", fields: [userIDCreated], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "HadithUserCreated")
    userUpdated User? @relation("Hadith_userIDUpdatedToUser", fields: [userIDUpdated], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "HadithUserUpdated")
    books HadithBook[]
    translations HadithTranslation[]

    @@index([topicID], map: "fki_HadithTopicID")
    @@index([userIDCreated], map: "fki_HadithUserCreated")
    @@index([userIDUpdated], map: "fki_HadithUserUpdated")

    @@allow('all', auth().role == "admin")
    @@allow('read', status=="published")
}

model HadithBook {
    hadithID Int
    bookID Int
    hadithRefNumber Int
    book Book @relation(fields: [bookID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "HadithBook_Book_id")
    hadith Hadith @relation(fields: [hadithID], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "HadithBook_Hadith_id")

    @@id([hadithID, bookID])
    @@index([hadithID], map: "fki_HadithBook_Hadith_id")
    @@index([bookID], map: "fki_HadithBook_Book_id")

    @@allow('all', auth().role == "admin")
    @@allow('read', true)
}

model Language {
    code String @id
    name String
    rtl Boolean @default(false)
    sort Int?
    bookTranslations BookTranslation[]
    hadithTranslations HadithTranslation[]
    hadithTopicTranslations TopicTranslation[]

    @@allow('all', auth().role == "admin")
    @@allow('read', true)
}

model HadithTranslation extends Base {
    hadithID Int
    languageCode String
    text String
    userCreated User? @relation("HadithTranslation_userIDCreatedToUser", fields: [userIDCreated], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "HadithTranslationUserCreated")
    userUpdated User? @relation("HadithTranslation_userIDUpdatedToUser", fields: [userIDUpdated], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "HadithTranslationUserUpdated")
    hadith Hadith @relation(fields: [hadithID], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "HadithTranslation_HadithID")
    language Language @relation(fields: [languageCode], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "HadithTranslation_LanguageCode")
    image HadithTranslationImage?

    @@id([hadithID, languageCode])
    @@index([userIDCreated], map: "fki_HadithTranslationUserCreated")
    @@index([userIDUpdated], map: "fki_HadithTranslationUserUpdated")
    @@index([languageCode], map: "fki_HadithTranslation_LanguageCode")
    @@index([hadithID], map: "fki_HadithTranslation_HadithID")

    @@allow('all', auth().role == "admin")
    @@allow('read', true)
}

model HadithTranslationImage {
    hadithID Int
    languageCode String
    hadithFontScale Int @default(0)
    translationFontScale Int @default(0)    
    color String @default("#000000")
    hadithTranslation HadithTranslation @relation(fields: [hadithID, languageCode], references: [hadithID, languageCode], onDelete: Cascade, onUpdate: NoAction)
    
    @@id([hadithID, languageCode])
    @@index([languageCode], map: "fki_HadithImage_LanguageCode")
    @@index([hadithID], map: "fki_HadithImage_HadithID")

    @@allow('all', auth().role == "admin")
    @@allow('read', true)
}

model TopicTranslation extends Base {
    topicID Int
    languageCode String
    title String
    userCreated User? @relation("TopicTranslation_userIDCreatedToUser", fields: [userIDCreated], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "TopicTranslationUserCreated")
    userUpdated User? @relation("TopicTranslation_userIDUpdatedToUser", fields: [userIDUpdated], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "TopicTranslationUserUpdated")
    topic Topic @relation(fields: [topicID], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "TopicTranslation_TopicID")
    language Language @relation(fields: [languageCode], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "TopicTranslation_LanguageCode")

    @@id([topicID, languageCode])
    @@index([userIDCreated], map: "fki_TopicTranslationUserCreated")
    @@index([userIDUpdated], map: "fki_TopicTranslationUserUpdated")
    @@index([languageCode], map: "fki_TopicTranslation_LanguageCode")
    @@index([topicID], map: "fki_TopicTranslation_TopicID")

    @@allow('all', auth().role == "admin")
    @@allow('read', true)
}

model BookTranslation extends Base {
    bookID Int
    languageCode String
    name String
    userCreated User? @relation("BookTranslation_userIDCreatedToUser", fields: [userIDCreated], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "BookTranslationUserCreated")
    userUpdated User? @relation("BookTranslation_userIDUpdatedToUser", fields: [userIDUpdated], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "BookTranslationUserUpdated")
    book Book @relation(fields: [bookID], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "BookTranslation_BookID")
    language Language @relation(fields: [languageCode], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "BookTranslation_LanguageCode")

    @@id([bookID, languageCode])
    @@index([userIDCreated], map: "fki_BookTranslationUserCreated")
    @@index([userIDUpdated], map: "fki_BookTranslationUserUpdated")
    @@index([bookID], map: "fki_BookTranslation_BookID")
    @@index([languageCode], map: "fki_BookTranslation_LanguageCode")

    @@allow('all', auth().role == "admin")
    @@allow('read', true)
}

model Account {
    id String @id @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String?
    access_token String?
    expires_at Int?
    token_type String?
    scope String?
    id_token String?
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])

    @@allow('all', auth().role == "admin")
}

model Session {
    id String @id @default(cuid())
    sessionToken String @unique
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id String @id @default(cuid())
    name String?
    email String? @unique
    emailVerified DateTime?
    image String?
    role String?
    accounts Account[]
    sessions Session[]
    booksCreated Book[] @relation("Book_userIDCreatedToUser")
    booksUpdated Book[] @relation("Book_userIDUpdatedToUser")
    hadithTopicsCreated Topic[] @relation("Topic_userIDCreatedToUser")
    hadithTopicsUpdated Topic[] @relation("Topic_userIDUpdatedToUser")
    hadithsCreated Hadith[] @relation("Hadith_userIDCreatedToUser")
    hadithsUpdated Hadith[] @relation("Hadith_userIDUpdatedToUser")
    bookTranslationsCreated BookTranslation[] @relation("BookTranslation_userIDCreatedToUser")
    bookTranslationsUpdated BookTranslation[] @relation("BookTranslation_userIDUpdatedToUser")
    hadithTranslationsCreated HadithTranslation[] @relation("HadithTranslation_userIDCreatedToUser")
    hadithTranslationssUpdated HadithTranslation[] @relation("HadithTranslation_userIDUpdatedToUser")
    hadithTopicTranslationsCreated TopicTranslation[] @relation("TopicTranslation_userIDCreatedToUser")
    hadithTopicTranslationssUpdated TopicTranslation[] @relation("TopicTranslation_userIDUpdatedToUser")

    @@allow('all', auth().role == "admin")
    @@allow('read', auth().id == id)
}

model VerificationToken {
    identifier String
    token String @unique
    expires DateTime

    @@unique([identifier, token])
}

enum Status {
    draft
    published
    archived
}
